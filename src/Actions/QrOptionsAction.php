<?php

namespace LaraZeus\Qr\Actions;

use Closure;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Get;
use Filament\Forms\Set;
use LaraZeus\Qr\Facades\Qr;

class QrOptionsAction extends Action
{
    public Closure | string $parentState;

    public ?Closure $configureActionUsing;

    /*public static function make(?string $name = null): static
    {
        $make = parent::make($name); // TODO: Change the autogenerated stub

        // todo, getting $configureActionUsing must not be accessed before initialization
        /*$make->configureUsing(function ($make){
            return $make->getActionConfig();
        });* /

        return $make;
    }*/

    protected function setUp(): void
    {
        parent::setUp();

        // todo, getting $configureActionUsing must not be accessed before initialization
        /*$this->tap(function(){
            return $this->evaluate($this->getActionConfig());
        });*/

        $this->fillForm(function (Get $get) {
            $getName = $this->getParentState();
            $data = $get($getName . '.options') ?? Qr::getDefaultOptions();

            return [
                'options' => $data,
                'url' => $get($getName . '.url'),
            ];
        });

        $this->form(fn () => Qr::getFormSchema($this->getParentState()));

        $this->action(function (Set $set, $data) {
            $getName = $this->getParentState();
            $set($getName, $data);
        });

        $this->color('gray')
            ->icon('heroicon-o-qr-code')
            ->tooltip('customize the QR code design')
            ->iconButton();

        $this->modalHeading(fn (): string => __('manage short link'));

        $this->modalDescription(fn (): string => __('Create short link with QR code'));

        $this->modalIcon('heroicon-o-qr-code');

        $this->modalIconColor('info');

        $this->modalSubmitActionLabel(__('save'));

        $this->successNotificationTitle(__('Saved'));
    }

    public function parentState(Closure | string $url): static
    {
        $this->parentState = $url;

        return $this;
    }

    public function getParentState(): Closure | string
    {
        return $this->evaluate($this->parentState);
    }

    public function configureActionUsing(Closure $callback): static
    {
        $this->configureActionUsing = $callback;

        return $this;
    }

    public function getActionConfig(): ?Closure
    {
        return $this->configureActionUsing;
    }
}
